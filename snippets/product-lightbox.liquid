{% comment %}
  Product Lightbox Component
  
  Usage: {% render 'product-lightbox', images: gallery_images, product: product %}
  
  Parameters:
  - images: Array of images to display
  - product: Shopify product object
{% endcomment %}

<div class="product-lightbox" data-lightbox>
  <div class="lightbox-overlay"></div>
  
  <div class="lightbox-content">
    <!-- Close Button -->
    <button class="lightbox-close" data-lightbox-close aria-label="Cerrar">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    
    <!-- Lightbox Slides -->
    <div class="lightbox-slides">
      {% for image in images %}
        <div class="lightbox-slide" data-lightbox-slide="{{ forloop.index0 }}">
          <img 
            src="{{ image | img_url: '1200x1200' }}" 
            srcset="{{ image | img_url: '800x800' }} 800w,
                    {{ image | img_url: '1200x1200' }} 1200w,
                    {{ image | img_url: '1600x1600' }} 1600w,
                    {{ image | img_url: '2000x2000' }} 2000w"
            sizes="90vw"
            alt="{% if image.alt != blank %}{{ image.alt }}{% else %}{{ product.title }} - Imagen {{ forloop.index }}{% endif %}"
            class="lightbox-image"
          >
          
          <!-- Image Counter -->
          <div class="lightbox-counter">
            <span class="lightbox-counter-current">{{ forloop.index }}</span>
            <span class="lightbox-counter-separator"> / </span>
            <span class="lightbox-counter-total">{{ images.size }}</span>
          </div>
        </div>
      {% endfor %}
    </div>
    
    <!-- Navigation Arrows -->
    {% if images.size > 1 %}
      <button class="lightbox-prev" data-lightbox-nav="prev" aria-label="Imagen anterior">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <button class="lightbox-next" data-lightbox-nav="next" aria-label="Siguiente imagen">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    {% endif %}
    
    <!-- Thumbnails -->
    {% if images.size > 1 %}
      <div class="lightbox-thumbs">
        {% for image in images %}
          <div class="lightbox-thumb" data-lightbox-thumb="{{ forloop.index0 }}">
            <img 
              src="{{ image | img_url: '100x100' }}" 
              alt="Miniatura {{ forloop.index }}"
            >
          </div>
        {% endfor %}
      </div>
    {% endif %}
  </div>
</div>

<script>
(function() {
  let currentLightboxIndex = 0;
  let totalLightboxSlides = 0;
  
  function initLightbox() {
    const lightbox = document.querySelector('[data-lightbox]');
    if (!lightbox) return;
    
    const slides = lightbox.querySelectorAll('.lightbox-slide');
    const thumbs = lightbox.querySelectorAll('.lightbox-thumb');
    const closeBtn = lightbox.querySelector('[data-lightbox-close]');
    const overlay = lightbox.querySelector('.lightbox-overlay');
    const prevBtn = lightbox.querySelector('[data-lightbox-nav="prev"]');
    const nextBtn = lightbox.querySelector('[data-lightbox-nav="next"]');
    
    totalLightboxSlides = slides.length;
    
    // Función para mostrar slide
    function showLightboxSlide(index) {
      if (index < 0) index = totalLightboxSlides - 1;
      if (index >= totalLightboxSlides) index = 0;
      
      currentLightboxIndex = index;
      
      // Ocultar todos los slides
      slides.forEach(slide => {
        slide.style.display = 'none';
      });
      
      // Remover active de todos los thumbs
      thumbs.forEach(thumb => {
        thumb.classList.remove('active');
      });
      
      // Mostrar slide actual
      if (slides[index]) {
        slides[index].style.display = 'flex';
      }
      
      // Activar thumb actual
      if (thumbs[index]) {
        thumbs[index].classList.add('active');
      }
      
      // Actualizar contador
      const currentCounter = slides[index]?.querySelector('.lightbox-counter-current');
      if (currentCounter) {
        currentCounter.textContent = index + 1;
      }
    }
    
    // Función para abrir lightbox
    function openLightbox(index = 0) {
      lightbox.classList.add('active');
      document.body.style.overflow = 'hidden';
      showLightboxSlide(index);
    }
    
    // Función para cerrar lightbox
    function closeLightbox() {
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    // Event listeners
    if (closeBtn) {
      closeBtn.addEventListener('click', closeLightbox);
    }
    
    if (overlay) {
      overlay.addEventListener('click', closeLightbox);
    }
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        showLightboxSlide(currentLightboxIndex - 1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        showLightboxSlide(currentLightboxIndex + 1);
      });
    }
    
    // Thumbs click
    thumbs.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        showLightboxSlide(index);
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox.classList.contains('active')) return;
      
      if (e.key === 'Escape') {
        closeLightbox();
      } else if (e.key === 'ArrowLeft') {
        showLightboxSlide(currentLightboxIndex - 1);
      } else if (e.key === 'ArrowRight') {
        showLightboxSlide(currentLightboxIndex + 1);
      }
    });
    
    // Touch swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    
    lightbox.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });
    
    lightbox.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleLightboxSwipe();
    }, { passive: true });
    
    function handleLightboxSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          showLightboxSlide(currentLightboxIndex + 1);
        } else {
          showLightboxSlide(currentLightboxIndex - 1);
        }
      }
    }
    
    // Listen for custom event
    window.addEventListener('openLightbox', (e) => {
      const index = e.detail?.index || 0;
      openLightbox(index);
    });
    
    // Global function
    window.openLightbox = openLightbox;
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLightbox);
  } else {
    initLightbox();
  }
})();
</script>

<style>
.product-lightbox {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  display: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.product-lightbox.active {
  display: block;
  opacity: 1;
}

.lightbox-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.95);
}

.lightbox-content {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.lightbox-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.1);
  border: none;
  border-radius: 50%;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10002;
  transition: all 0.2s;
  color: white;
}

.lightbox-close:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.1);
}

.lightbox-slides {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 80px 80px 140px;
  box-sizing: border-box;
}

.lightbox-slide {
  display: none;
  max-width: 100%;
  max-height: 100%;
  width: 100%;
  height: 100%;
  align-items: center;
  justify-content: center;
  position: relative;
}

.lightbox-slide:first-child {
  display: flex;
}

.lightbox-image {
  max-width: 100%;
  max-height: 100%;
  width: auto;
  height: auto;
  object-fit: contain;
  border-radius: 4px;
  display: block;
}

.lightbox-counter {
  position: absolute;
  top: 1rem;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.875rem;
  z-index: 10001;
  height: fit-content;
}

.lightbox-prev,
.lightbox-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(255, 255, 255, 0.1);
  border: none;
  border-radius: 50%;
  width: 56px;
  height: 56px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10001;
  transition: all 0.2s;
  color: white;
}

.lightbox-prev {
  left: 2rem;
}

.lightbox-next {
  right: 2rem;
}

.lightbox-prev:hover,
.lightbox-next:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateY(-50%) scale(1.1);
}

.lightbox-thumbs {
  position: absolute;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  max-width: 90%;
  overflow-x: auto;
  padding: 10px;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 12px;
  z-index: 10001;
}

.lightbox-thumbs::-webkit-scrollbar {
  height: 6px;
}

.lightbox-thumbs::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
}

.lightbox-thumbs::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 3px;
}

.lightbox-thumb {
  flex-shrink: 0;
  width: 60px;
  height: 60px;
  cursor: pointer;
  opacity: 0.5;
  transition: opacity 0.2s, transform 0.2s;
  border-radius: 6px;
  overflow: hidden;
  border: 2px solid transparent;
}

.lightbox-thumb.active {
  opacity: 1;
  border-color: white;
}

.lightbox-thumb:hover {
  opacity: 1;
  transform: scale(1.05);
}

.lightbox-thumb img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Responsive */
@media (max-width: 768px) {
  .lightbox-slides {
    padding: 60px 20px 120px;
  }
  
  .lightbox-close {
    width: 40px;
    height: 40px;
    top: 0.5rem;
    right: 0.5rem;
  }
  
  .lightbox-prev,
  .lightbox-next {
    width: 44px;
    height: 44px;
  }
  
  .lightbox-prev {
    left: 0.5rem;
  }
  
  .lightbox-next {
    right: 0.5rem;
  }
  
  .lightbox-thumbs {
    bottom: 1rem;
    padding: 8px;
    gap: 8px;
    max-width: 95%;
  }
  
  .lightbox-thumb {
    width: 50px;
    height: 50px;
  }
  
  .lightbox-counter {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
  }
}

@media (max-width: 480px) {
  .lightbox-slides {
    padding: 50px 10px 110px;
  }
  
  .lightbox-prev,
  .lightbox-next {
    width: 36px;
    height: 36px;
  }
  
  .lightbox-prev svg,
  .lightbox-next svg {
    width: 24px;
    height: 24px;
  }
}
</style>